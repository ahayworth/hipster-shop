# opentelemetry-collector can be thought of as a proxy for telemetry events.
# It can receive metrics and traces on many protocols including OTLP and Jaeger,
# do some processing, and forward to many observability tools.
#
# TODO:
#   * add metrics back to this file at some point
#   * add a processor hook to tag stuff as coming from a localdev stack
#
# This setup for local development targets Grafana Tempo
extensions:
  health_check:

receivers:
  otlp:
    protocols:
      grpc:
      http:
  fluentforward:
    endpoint: 0.0.0.0:24224
  redis:
    endpoint: "${REDIS_ADDR}"
    service_name: "cartservice"
    collection_interval: 10s
  docker_stats:

# TODO: tag all events to make it clear it's localdev
processors:
  batch:

exporters:
  logging:
    # set to debug and your traces will get printed to the console spammily
    logLevel: info
  # local Grafana Tempo
  otlp:
    # forwards to Tempo over gRPC which is configured locally to listen on 55680 (the default for Tempo)
    endpoint: "tempo:55680"
    insecure: true
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"
    labels:
      attributes:
        container_name: 'container_name'
        container_id: 'container_id'

  # honeycomb
  # otlp/2:
  #  endpoint: "api.honeycomb.io:443"
  #  headers:
  #    # TODO: figure out how to plumb the key here effectively without hardcoding
  #    "x-honeycomb-team": "-------- your key here ---------"
  #    "x-honeycomb-dataset": "-- your dataset name --"
  # TODO:
  #   * add a Lightstep example
  #   * add Jaeger / Zipkin examples?
  #   * others, as folks send PRs

service:
  extensions:
    - health_check
  pipelines:
    traces:
      receivers:
        - otlp
      processors:
        - batch
      exporters:
        # - logging
        - otlp
    metrics:
      receivers:
        - otlp
        - redis
        - docker_stats
      exporters:
        - logging
        # - otlp
    logs:
      receivers:
        - otlp
        - fluentforward
      exporters:
        - loki
